@model Product
@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<table class="table">
    @{
        List<ImageGallery> list = ViewBag.Gallery;

        if (list.Count > 0)
        {
            for (int i = 0; i < list.Count(); i += 3)
            {
                int j = i;

                <tr>
                    @while (j < i + 3 && j < list.Count())
                    {
                        <td>
                            <a href="data:image/png;base64, @Convert.ToBase64String(list[j].ImageData, 0, list[j].ImageData.Length)" class="thumbnail" style="height: 220px;">
                                <img src="data:image/png;base64, @Convert.ToBase64String(list[j].ImageData, 0, list[j].ImageData.Length)" style="width:250px;height:200px;" />
                            </a>
                        </td>

                        j++;
                    }
                </tr>
            }
        }
        else
        {
            <tr>
                <td>
                    <img src="~/Images/no-image.png" class="thumbnail" style="height:100px; width:130px" />
                </td>
            </tr>
        }
    }
</table>

<div class="container">
    <h3>@Html.DisplayFor(m => m.ProductTitle)</h3>
    <div class="well well-sm">
        <p>@Html.DisplayFor(m => m.ProductContent)</p>
        <p>Price: @Html.DisplayFor(m => m.ProductPrice)</p>
        <p>Category: 
            @{
                var categories = ViewBag.Categories;

                foreach (var item in categories)
                {
                    if (item.CategoryId == Model.CategoryId)
                    {
                        @item.CategoryName
                    }
                }
            }
        </p>
    </div>
</div>

@{
    IList<Like> likes = ViewBag.Likes;
    string str = "0";

    if (likes.Count > 0)
    {
        int likedUsers = likes.Count();
        double likedLikes = 0.0;

        foreach (var item in likes)
        {
            likedLikes += double.Parse(item.Likes.ToString());
        }

        double mark = likedLikes / likedUsers;
        str = mark.ToString();

        if (str.IndexOf('.') > -1 && str.Length > str.IndexOf('.') + 3)
        {
            str = str.Substring(0, str.IndexOf('.') + 3);
        }
    }

    <div class="container">
        <p>Rating: @str</p>
    </div>

    List<User> usernames = ViewBag.Usernames;
    User user = usernames.Where(m => m.Username == User.Identity.Name).FirstOrDefault();

    if (user != null)
    {
        var like = likes.Where(m => m.UserID == user.UserId).FirstOrDefault();

        if (Request.IsAuthenticated && like == null)
        {
            using (Html.BeginForm("Rate", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div style="margin-bottom:20px;">
                    <input name="id" type="hidden" value="@Model.ProductsId" />
                    <input type="radio" name="rate" value="1" />
                    <input type="radio" name="rate" value="2" />
                    <input type="radio" name="rate" value="3" />
                    <input type="radio" name="rate" value="4" />
                    <input type="radio" name="rate" value="5" />

                    <input type="submit" value="Rate" />
                </div>
            }
        }
    }
}

@{
    var users = ViewBag.Users;

    if (users.Count > 0)
    {
        <div class="container">
            <h3>Comments</h3>
            <div class="well well-sm">
                @{
                    int index = 0;

                    foreach (var item in ViewBag.Comments)
                    {
                        <span style="font-weight: bold;">@users[index]</span> @item.Comment1 <br />

                        index++;
                    }
                }
            </div>

        </div>
    }
    
    @Html.Partial("_CommentCreate", new Comment())
}

<br />

@if (Request.IsAuthenticated)
{
    <a href="#" class="btn btn-default">Buy</a>
}

@Html.ActionLink("Back to list", "Index", "Products", new { @class = "btn btn-default" })
